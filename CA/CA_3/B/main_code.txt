`timescale 1ns / 1ps

module Mux_2x1(I1, I0, S, Out);
input I1, I0, S;
output Out;
assign Out = ((~S)&I0)|(S&I1);
endmodule

module Mux_4x1(I3, I2, I1, I0, S1, S0, Out);
input I3, I2, I1, I0, S1, S0;
output Out;

assign Out = ((~S1)&(~S0)&I0)|((~S1)&S0&I1)|((S1)&(~S0)&I2)|(S1&S0&I3);
endmodule


module mohit(I15, I14, I13, I12, I11, I10, I9, I8, I7, I6, I5, I4, I3, I2, I1, I0,S3, S2, S1, S0, Out);
input I15, I14, I13, I12, I11, I10, I9, I8, I7, I6, I5, I4, I3, I2, I1, I0, S3, S2, S1, S0;
output Out;

wire o1, o2, o3, o4, o5, o6;

Mux_4x1 M41(I3, I2, I1, I0, S1, S0, o1);
Mux_4x1 M42(I7, I6, I5, I4, S1, S0, o2);
Mux_4x1 M43(I11,I10,I9, I8, S1, S0, o3);
Mux_4x1 M44(I15,I14,I13,I12,S1, S0, o4);

Mux_2x1 M21(o2, o1, S2, o5);
Mux_2x1 M22(o4, o3, S2, o6);

Mux_2x1 M23(o6, o5, S3, Out);

endmodule





`timescale 1ns / 1ps

module mohit_tb();
reg [15:0] I;
reg [3:0] S;
wire Out;

mohit (I[15], I[14], I[13], I[12], I[11], I[10], I[9], I[8], I[7], I[6], I[5], I[4], I[3], I[2], I[1], I[0],
						S[3], S[2], S[1], S[0], Out);
initial
	begin
		S=4'b0000; I=16'b1011010010100100; #20;
		S=4'b0001; I=16'b0100100010010100; #20;
		S=4'b0010; I=16'b0011001000010001; #20;
		S=4'b0011; I=16'b0001000000001001; #20;
		S=4'b0100; I=16'b0100100010010000; #20;
		S=4'b0101; I=16'b0101010010010001; #20;
		S=4'b0110; I=16'b0101001010001001; #20;
		S=4'b0111; I=16'b1000000100000000; #20;
		S=4'b1000; I=16'b0100010010001000; #20;
		S=4'b1001; I=16'b0000000001001000; #20;
		S=4'b1010; I=16'b0010000000100000; #20;
		S=4'b1011; I=16'b0100100010010100; #20;
		S=4'b1100; I=16'b0100100010010100; #20;
		S=4'b1101; I=16'b0100100010010100; #20;
		S=4'b1110; I=16'b0000000000000010; #20;
		S=4'b1111; I=16'b0100100010010100; #20;
	end
endmodule